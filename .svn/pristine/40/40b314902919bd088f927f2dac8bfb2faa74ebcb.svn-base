package map;

import java.io.Serializable;
import java.awt.Color;
import java.util.UUID;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.render.AnnotationAttributes;
import gov.nasa.worldwind.render.GlobeAnnotation;

/**
 * Map annotations that can be "toggled" with a mouse click.<br/>
 * <b>WARNING!  NOT ALL FIELDS ARE SERIALIZED!</b><br/>
 * Serialized fields are ONLY: _selectedText, _unselectedText, position, minActiveAltitude, maxActiveAltitude <br/>
 * Currently, the attributes are NOT serialized.
 * 
 * @author Scott Rixner, Stephen Wong
 */
public class ToggleAnnotation extends DummyGlobeAnnotation implements Serializable {
	private static final long serialVersionUID = -1464937422963144193L;

	public static final Color DEFAULT_SELECTED_BACKGROUND_COLOR = new Color(0f, .5f, 0f, .5f);

	private String _unselectedText = "";
	private String _selectedText = "";
	private boolean _selected = false;
	private Color selectedBackgroundColor = DEFAULT_SELECTED_BACKGROUND_COLOR;
	private Color unselectedBackgroundColor;
	private UUID uuid = UUID.randomUUID();

	/**
	* Sets the annotation to either the selected or non-selected state.
	* 	 * Will call the protected setSelectedTrue or setSelectedFalse methods 
	* 	 * @param selected Whether or not the annotation will be selected.
	*/
	public void setSelected(boolean selected) {
		_selected = selected;
		if (selected) {
			selectedTrueAction();
		} else {
			selectedFalseAction();
		}
	}

	/**
	* Protected method that performs action when annotation is set to selected.  
	* 	 * By default, saves the current background color as next unselected background color and sets text to 
	* 	 * _selectedText.
	* 	 * When overriding this method, be sure to call super.selectedTrueAction() to get the default behavior.
	*/
	protected void selectedTrueAction() {
		unselectedBackgroundColor = this.getAttributes().getBackgroundColor();
		setText(_selectedText);
		getAttributes().setBackgroundColor(selectedBackgroundColor);
	}

	/**
	* Protected method that performs action when annotation is set to unselected.
	* 	 * By default, sets background color to unselectedBackgroundColor, and sets text to _unselectedText. 
	* 	 * When overriding this method, be sure to call super.selectedFalseAction() to get the default behavior.
	*/
	protected void selectedFalseAction() {
		setText(_unselectedText);
		getAttributes().setBackgroundColor(unselectedBackgroundColor);
	}

	/**
	* Accessor for the current selected state
	* 	 * @return True is currently selected, false otherwise.
	*/
	public boolean isSelected() {
		return this._selected;
	}

	/**
	* Toggle between selected and unselected.
	*/
	public void toggleText() {
		setSelected(!_selected);
	}

	@Override
	public String toString() {
		return "\"" + this.getText() + "\"/\"" + _selectedText + "\"@(" + this.getPosition() + ", "
				+ this.getAttributes();
	}

	@Override
	public int hashCode() {
		return uuid.hashCode();
	}

	/**
	* Copy constructor
	* 	 * @param ta ToggleAnnotation to copy
	*/
	public ToggleAnnotation(ToggleAnnotation ta) {
		this(ta._unselectedText, ta._selectedText, ta.getPosition(), ta.getAttributes());
		this.setMinActiveAltitude(ta.getMinActiveAltitude());
		this.setMaxActiveAltitude(ta.getMaxActiveAltitude());
	}

	/**
	* Custom serialization process to serialize non-serializable superclass
	* 	 * @param out Output stream for serialization
	* 	 * @throws IOException
	*/
	private void writeObject(ObjectOutputStream out) throws IOException {
		out.defaultWriteObject(); //ToggleAnnotation-defined fields can use default serialization process
		out.writeObject(new DefaultAnnotationAttributes(this.getAttributes())); // convert the attributes to something serializable first
		out.writeUTF(this.getText()); // send out the superclass's annotation string
		Position p = this.getPosition(); // get the Position which is non-serializable 
		out.writeDouble(p.getLatitude().getDegrees()); // send out latitude
		out.writeDouble(p.getLongitude().getDegrees()); // send out longitude
		out.writeDouble(p.getElevation()); // send out elevation
		out.writeDouble(this.getMinActiveAltitude()); // send out min active altitude
		out.writeDouble(this.getMaxActiveAltitude()); // send out max active altitude
	}

	/**
	* Custom deserialization process to deserialize non-serializable superclass.
	* 	 * @param in Input stream for deserialization
	* 	 * @throws IOException
	* 	 * @throws ClassNotFoundException
	*/
	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		in.defaultReadObject();//ToggleAnnotation-defined fields can use default deserialization process
		this.setAttributes((AnnotationAttributes) in.readObject());
		this.setText(in.readUTF()); // read in superclass's annotation string
		double lat = in.readDouble(); // read in latitude
		double lon = in.readDouble(); // read in longitude
		double elev = in.readDouble(); // read in elevation
		this.setPosition(Position.fromDegrees(lat, lon, elev)); // set Position	
		this.setMinActiveAltitude(in.readDouble()); // read in min active altitude
		this.setMaxActiveAltitude(in.readDouble()); // read in max active altitude
	}

	/**
	* Build a new toggling annotation.
	* 	 * 
	* 	 * @param unselectedText  - text to display when annotation is not selected
	* 	 * @param selectedText    - text to display when annotation is selected
	* 	 * @param pos             - position of annotation
	*/
	public ToggleAnnotation(String unselectedText, String selectedText, Position pos) {
		this(unselectedText, selectedText, pos, new DefaultAnnotationAttributes());

	}

	/**
	* Build a new toggling annotation with custom attributes
	* 	 * @param unselectedText  - text to display when annotation is not selected
	* 	 * @param selectedText    - text to display when annotation is selected
	* 	 * @param pos             - position of annotation
	* 	 * @param attr            - display attributes for the annotation.
	*/
	public ToggleAnnotation(String unselectedText, String selectedText, Position pos, AnnotationAttributes attr) {
		super(unselectedText, pos, attr);
		_unselectedText = unselectedText;
		_selectedText = selectedText;
		unselectedBackgroundColor = attr.getBackgroundColor();
	}

	/**
	* Converts a standard GlobeAnnotation to a ToggleAnnotation where the selected and unselected texts are the same.
	* 	 * @param annotation The GlobeAnnotation to convert.
	*/
	public ToggleAnnotation(GlobeAnnotation annotation) {
		this(annotation.getText(), annotation.getText(), annotation.getPosition(), annotation.getAttributes());
		this.setMinActiveAltitude(annotation.getMinActiveAltitude());
		this.setMaxActiveAltitude(annotation.getMaxActiveAltitude());
	}

	/**
	* Sets the background color to use when the annotation is selected.  To set the unselected background color, 
	* 	 * use the inherited getAttributes().setBackgroundColor(Color c). The annotation must be unselected to set the 
	* 	 * unselected background color.   The selected background color can be set at any time. 
	* 	 * @param c The background color to use when selected.
	*/
	public void setSelectedBackgroundColor(Color c) {
		this.selectedBackgroundColor = c;
	}

	@Override
	public boolean equals(Object other) {
		if (!(other instanceof ToggleAnnotation))
			return false;
		return uuid.equals(((ToggleAnnotation) other).uuid);
	}
}

/*package*/ class DummyGlobeAnnotation extends GlobeAnnotation {
	/**
	* No-arg constructor used during serialization.  Assume no useful values are set here.
	*/
	protected DummyGlobeAnnotation() {
		super("", Position.fromDegrees(0.0, 0.0), new DefaultAnnotationAttributes());
	}

	/**
	* Constructor used by ToggleAnnotation
	* 	 * @param unselectedText  - text to display when annotation is not selected
	* 	 * @param pos             - position of annotation
	* 	 * @param attr            - annotation attributes
	*/
	public DummyGlobeAnnotation(String unselectedText, Position pos, AnnotationAttributes attr) {
		super(unselectedText, pos, attr);
	}

}
